#!/usr/bin/env bash
# primary-screen
set -euo pipefail
IFS=$'\n\t'

displayUsage() {
    echo '
This script allows the user to set the primary screen for their display. It takes command line arguments and/or displays a dialogue box to allow the user to select the primary screen.

Options:
  -l: lists the available screens and exits
  -h: displays the usage message and exits
  -d: displays a dialogue box to allow the user to select the primary screen

Usage:
set_primary_screen.sh [-l] [-h] [-d] [screen_name]

Arguments:
screen_name (optional): the name of the screen to set as the primary screen. If not provided, the script will attempt to determine the screen with the mouse on it.

Note:
If both the -d and screen_name options are used, the screen_name option will be ignored.
'
}

dialog=false
primary_screen=''

while getopts ":hdl" opt; do
    case ${opt} in
    l)
        echo "Available screen:"
        xrandr | awk '/primary/{print $1}' | xargs -i% echo '%*'
        xrandr | grep -v 'primary' | awk '/ connected/{print $1}'
        exit 1
    ;;
    h)
        displayUsage
        exit 1
        ;;
    d)
        dialog=true
        ;;
    \?)
        echo "Invalid option: $OPTARG" 1>&2
        exit 2
        ;;
    :)
        echo "Invalid option: $OPTARG requires an argument" 1>&2
        exit 2
        ;;
    esac
done
shift $((OPTIND-1))

if $dialog
then
    # show dialogue
    list="$(xrandr | awk '/primary/{print $1}')
$(xrandr | grep -v 'primary' | awk '/ connected/{print $1}')"
    primary_screen=$(zenity --list $list --column="Available screen(s)" --title="Choose Primary Screen")
    echo "$primary_screen"
fi

if [ $# -lt 1 ] && ! $dialog
then
    # if no input and no selection in dialogue use the screen with mouse in
    primary_screen=$(i3-msg -t get_workspaces | jq -r '.[] | select(.focused == true).output')
elif [ $# = 1 ]
then
    # Use input
     primary_screen=$1
fi

echo "Using screen: $primary_screen"
xrandr --output "$primary_screen" --primary
