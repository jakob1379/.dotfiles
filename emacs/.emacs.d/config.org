* Emacs Core Configs
** Package setup
#+begin_src emacs-lisp
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
						 ("gnu" . "https://elpa.gnu.org/packages/")
						 ("nongnu" . "https://elpa.nongnu.org/nongnu/")
						 ;; ("org"   . "https://orgmode.org/elpa/")
						 ("elpa"  . "https://elpa.gnu.org/packages/")))
(package-initialize)
;; https://github.com/jwiegley/use-package/issues/319#issuecomment-845214233
;; makes sure the :pin is respected
(assq-delete-all 'org package--builtins)
(assq-delete-all 'org package--builtin-versions)

;; make sure packages are refreshed
(when (not package-archive-contents)
  (package-refresh-contents))

;; ensure use-package is installed and loaded
(dolist (package '(use-package))
  (unless (package-installed-p package)
	(package-install package)))
(eval-when-compile (require 'use-package))

;; makes :ensure default to t
(require 'use-package-ensure)
(setq-default use-package-always-ensure t)

;; reduces the number of themes loaded at boot
(defadvice load-theme (before clear-previous-themes activate)
  ;; "Clear existing theme settings instead of layering them"
  (mapc #'disable-theme custom-enabled-themes))
#+end_src

#+RESULTS:

** Sane defaults
#+begin_src emacs-lisp

(setq-default
										;; indent-tabs-mode nil ;; go away, tabs - use spaces!
 ad-redefinition-action 'accept                     ;; Silence warnings for redefinition
 browse-url-browser-function 'browse-url-firefox    ;; set default browser to Firefox
 column-number-mode t                               ;; show cols/line in mode-line
 compilation-ask-about-save nil                     ;; do not ask about saving when compiling
 compilation-save-buffers-predicate '(lambda () nil)     ;; do not save unrelated buffers
 delete-by-moving-to-trash t                        ;; Delete files to trash
 fill-column 100                                    ;; set width for linebreaking
 gc-cons-threshold (* 8 1024 1024)                  ;; We're not using Game Boys anymore
 inhibit-startup-screen t                           ;; disable splash screen
 load-prefer-newer t
 pixel-scroll-precision-large-scroll-height 40.0
 read-process-output-max (* 1024 1024)              ;; Increase read size per process
 require-final-newline t                            ;; adds newline at end of file if necessary
 select-enable-clipboard t                          ;; Merge system's and Emacs' clipboard
 tab-always-indent 'complete                        ;; Tab indents first then tries completions
 tab-width 4                                        ;; Smaller width for tab characters
 uniquify-buffer-name-style 'forward                ;; Uniquify buffer names
 window-combination-resize t                        ;; Resize windows
 )
(electric-pair-mode)
(global-display-fill-column-indicator-mode 1)       ;; Show this indicator > | <
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)                         ;; Wrap line
(save-place-mode 1)                                 ;; continue where you left off
(tool-bar-mode 0)                                   ;; it's not used anyways
#+end_src

#+RESULTS:

** Narrow region
#+begin_src emacs-lisp
(put 'narrow-to-defun  'disabled nil)
(put 'narrow-to-page   'disabled nil)
(put 'downcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'set-goal-column 'disabled nil)
(put 'upcase-region 'disabled nil)
#+end_src

#+RESULTS:

** Desktop mode save and load
#+begin_src emacs-lisp
(setq desktop-path '("~/.emacs.d/.cache/"))
(desktop-save-mode)
(desktop-read)
#+end_src

#+RESULTS:
: t

** default hooks
#+begin_src emacs-lisp
(add-hook 'before-save-hook 'whitespace-cleanup)
#+end_src

#+RESULTS:
| whitespace-cleanup |

** y-or-n-p instead of yes/no
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

#+RESULTS:
: yes-or-no-p

** Make files executable if they start with a shebang
#+begin_src emacs-lisp
(defun add-chmod()
  (interactive)
  (save-restriction
	(widen)
	(let ((name (buffer-file-name)))
	  (if (and (not (string-match ":" name))
			   (not (string-match "/\\.[^/]+$" name))
			   (equal "#!" (buffer-substring 1 (min 3 (point-max)))))
		  (progn (set-file-modes name (logior (file-modes name) 73))
				 (message "Wrote %s (chmod +x)" name))))))

(add-hook 'after-save-hook
		  'executable-make-buffer-file-executable-if-script-p)

#+end_src

#+RESULTS:
| rmail-after-save-hook | executable-make-buffer-file-executable-if-script-p |

** Global hotkeys
#+begin_src emacs-lisp
(global-set-key (kbd "C-+")			 'text-scale-increase)
(global-set-key (kbd "C--")			 'text-scale-decrease)
(global-set-key [C-S-tab]				 'previous-window)
(global-set-key [C-mouse-4]			 'text-scale-increase)
(global-set-key [C-mouse-5]			 'text-scale-decrease)
(global-set-key [C-tab]						'other-window)
(global-set-key [f9]			'ispell-change-dictionary)
(global-set-key [f12]							 'ansible)

#+end_src

#+RESULTS:
: ansible

** Ansi colors decoding/rendering
#+begin_src emacs-lisp
(require 'ansi-color)
(defun display-ansi-colors ()
  (interactive)
  (ansi-color-apply-on-region (point-min) (point-max)))

#+end_src

#+RESULTS:
: display-ansi-colors

** Extra Garbage Collection (disabled)
#+BEGIN_SRC emacs-lisp
(add-function :after after-focus-change-function
			  (defun me/garbage-collect-maybe ()
				(unless (frame-focus-state)
				  (garbage-collect))))
#+END_SRC

#+RESULTS:

** Set snazzy theme
#+BEGIN_SRC emacs-lisp
(use-package snazzy-theme
  :config
  (load-theme 'snazzy t))
#+END_SRC

#+RESULTS:
: t

** restart emacs function
#+BEGIN_SRC emacs-lisp
(use-package restart-emacs)
#+END_SRC

#+RESULTS:

** Auto update emacs packages
#+BEGIN_SRC emacs-lisp
(use-package auto-package-update
  :init
  :config
  (setq auto-package-update-prompt-before-update t
		auto-package-update-interval 7)
  )
#+END_SRC

#+RESULTS:
: t

** non-ASCII characters
#+BEGIN_SRC emacs-lisp
(require 'iso-transl)
#+END_SRC

#+RESULTS:
: iso-transl

** start emacs server
If emacs is not running as a server, start one. It should've been started by systemd, but this is just to be sure
#+BEGIN_SRC emacs-lisp
  (require 'server)
  (unless (server-running-p)
	(server-start))
#+END_SRC

#+RESULTS:

* Mode configs
** All the icons
nice developer icons
#+begin_src emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p)
  :config
  (unless (member "all-the-icons" (font-family-list))
	(all-the-icons-install-fonts t)))
#+end_src

#+RESULTS:

** Ansible
Ansible is a bit funky in that it should be only be loaded if there is a local variable
defining that the file indeed is part of an ansible project. This is done by with a in the
projects with something like in

#+begin_src emacs-lisp
(use-package ansible)
#+end_src

#+RESULTS:

** Beacon
Don't lose your cursor
#+BEGIN_SRC emacs-lisp
  (use-package beacon
:ensure t
:diminish
:bind ("C-x =" . (lambda ()
				   (interactive)
				   (beacon-blink)
				   (what-cursor-position)))
:config (beacon-mode))
#+END_SRC

#+RESULTS:
| lambda | nil | (interactive) | (beacon-blink) | (what-cursor-position) |

** Company mode
This configures the nice dropdown autocompletion system called company modes. It is highly
extensible but package specific extensions like lsp, yasnippet, etc., should be configures in their
section and not here.

*** Company package

#+BEGIN_SRC emacs-lisp
(use-package company
  :delight company-mode
  :hook (after-init . global-company-mode)
  :config
  (add-to-list 'company-backends '(company-capf :with company-yasnippet))
  (setq company-dabbrev-downcase nil
		company-echo-delay 0.1
		company-idle-delay 0.01
		company-minimum-prefix-length 1
		company-selection-wrap-around t
		company-show-numbers t
		;; company-tooltip-align-annotations t
		;; company-tooltip-limit 20
		;; company-tooltip-align-annotations t
		)
)
#+END_SRC

*** Helm company
#+BEGIN_SRC emacs-lisp
(use-package helm-company
  :after (helm company)
  :bind (("M-x"     . helm-M-x) ;; Evaluate functions
		 ("C-x C-f" . helm-find-files) ;; Open or create files
		 ("C-x b"   . helm-mini) ;; Select buffers
		 ("C-x C-r" . helm-recentf) ;; Select recently saved files
		 ("C-c i"   . helm-imenu) ;; Select document heading
		 :map helm-map
		 ("<tab>" . helm-execute-persistent-action))

  :commands (helm-company)
  :init
  (define-key company-mode-map (kbd "C-;") 'helm-company)
  (define-key company-active-map (kbd "C-;") 'helm-company)
  :config
  (setq helm-company-display-candidates-hash t
		helm-M-x-show-short-doc t)
  )
#+END_SRC

#+RESULTS:

*** Company-statistics
This backend helps improve the user experience by keeping track of completions used and
order things accordingly

#+BEGIN_SRC emacs-lisp
(use-package company-statistics
  :config
  (company-statistics-mode))

#+END_SRC

#+RESULTS:
: t

*** Fuzzy search
Yes - we can have fuzzy search here too.
#+BEGIN_SRC emacs-lisp
(use-package company-fuzzy
  :diminish
  :config
  (setq company-fuzzy-passthrough-backends '(company-capf company-ispell))
  (global-company-fuzzy-mode))

#+END_SRC

#+RESULTS:
: t

*** Company box - pretty icons
#+BEGIN_SRC emacs-lisp
;; With use-package:
(use-package company-box
  :diminish
  :hook (company-mode . company-box-mode))
#+END_SRC

#+RESULTS:
| company-box-mode | company-mode-set-explicitly |

** Conf-mode
Associate various files with conf-mode
#+BEGIN_SRC emacs-lisp
  (use-package conf-mode
	:mode
	("\\.cfg\\'"		. conf-mode)
	("\\.conf\\'"		. conf-mode)
	("\\.env\\'"		. conf-mode)
	("\\.gitignore\\'"	. conf-mode)
	("\\.txt\\'"		. conf-mode)
	("\\.txt\\'"		. conf-mode)
	)
#+END_SRC

** Delight and Deminish
These two packages enable the customization of the mode line to either or customize text.

#+BEGIN_SRC emacs-lisp
  (use-package delight
	:ensure t)
  (use-package diminish
	:ensure t)
#+END_SRC

#+RESULTS:

** Direnv
#+BEGIN_SRC emacs-lisp
(use-package direnv
 :config
 (direnv-mode))
#+END_SRC

#+RESULTS:
: t

** Emacs restart
#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs)
#+END_SRC

#+RESULTS:

** Expand region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-=" . er/expand-region))
#+END_SRC

#+RESULTS:
: er/expand-region

** Firacode
nice ligatures
#+BEGIN_SRC emacs-lisp
(use-package fira-code-mode
  :custom (fira-code-mode-disabled-ligatures '("[]" "x"))  ; ligatures you don't want
  :delight
  :config (global-fira-code-mode))
#+END_SRC

#+RESULTS:
: t

** Flyspell
#+BEGIN_SRC emacs-lisp
  (use-package flyspell
	:delight
	:hook (prog-mode . (lambda () (setq flyspell-prog-text-faces
										(delq 'font-lock-string-face
											  flyspell-prog-text-faces))))
		 (text-mode . flyspell-mode)
		 (prog-mode . flyspell-prog-mode))
#+END_SRC

#+RESULTS:

*** Guess Language
#+BEGIN_SRC emacs-lisp
(use-package guess-language
  :config (setq guess-language-languages '(en da)
				guess-language-min-paragraph-length 35))

#+END_SRC

#+RESULTS:
: t

** Format all
Nice tool that uses prettier to format code
#+BEGIN_SRC emacs-lisp
(use-package format-all)
#+END_SRC

#+RESULTS:

** Graphviz-Dot-Mode
#+begin_src emacs-lisp
(use-package graphviz-dot-mode)
#+end_src

#+RESULTS:

** Helm
#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :after all-the-icons
  :bind (("M-x"     . helm-M-x) ;; Evaluate functions
		 ("C-x C-f" . helm-find-files) ;; Open or create files
		 ("C-x b"   . helm-mini) ;; Select buffers
		 ("C-x C-r" . helm-recentf) ;; Select recently saved files
		 ("C-c i"   . helm-imenu) ;; Select document heading
		 :map helm-map
		 ;; ("<tab>" . helm-execute-persistent-action)
		 )
  :config (helm-adaptive-mode)
  ;; (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
  (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
  (setq helm-always-two-windows nil
		helm-autoresize-max-height 0
		helm-autoresize-min-height 20
		helm-echo-input-in-header-line t
		helm-ff-file-name-history-use-recentf t
		helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
		helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
		helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
		)
  (helm-autoresize-mode 1)
  (autoload 'dired-jump "dired-x"
	"Jump to Dired buffer corresponding to current buffer." t)

  (autoload 'dired-jump-other-window "dired-x"
	"Like \\[dired-jump] (dired-jump) but in other window." t)

  (define-key global-map "\C-x\C-j" 'dired-jump)
  (define-key global-map "\C-x4\C-j" 'dired-jump-other-window)
  (helm-ff-icon-mode)
  )
#+END_SRC

#+RESULTS:

** Hideshow
#+BEGIN_SRC emacs-lisp
(use-package hideshow
  :bind (("C-c TAB" . hs-toggle-hiding)
		 ("C-c C--" . 'hs-hide-all)
		 ("C-c C-+" . 'hs-show-all))
  :delight hs-minor-mode
  :init (add-hook 'prog-mode-hook #'hs-minor-mode)
  ;; :diminish hs-minor-mode
  :config
  ;; Automatically open a block if you search for something where it matches
  (setq hs-isearch-open t)

  ;; Add `json-mode' and `javascript-mode' to the list
  (setq hs-special-modes-alist (mapcar 'purecopy '((c-mode "{" "}" "/[*/]" nil nil)
												   (c++-mode "{" "}" "/[*/]" nil nil)
												   (java-mode "{" "}" "/[*/]" nil nil)
												   (js-mode "{" "}" "/[*/]" nil)
												   (json-mode "{" "}" "/[*/]" nil)
												   (javascript-mode  "{" "}" "/[*/]" nil)))))

#+END_SRC

#+RESULTS:
: hs-show-all

** Highlight Symbol
#+BEGIN_SRC emacs-lisp
(use-package highlight-symbol
  :hook ((prog-mode . highlight-symbol-mode)
		 ;; (prog-mode . delete-selection-mode)
		 (org-mode . highlight-symbol-mode)
		 ;; (org-mode . delete-selection-mode)
		 )
  :diminish
  :config
  (setq highlight-symbol-idle-delay 0.01))
#+END_SRC

#+RESULTS:

** Hungry Delete
Deleting a whitespace character will delete all whitespace until the next non-whitespace character.
#+BEGIN_SRC emacs-lisp
(use-package hungry-delete
  :delight
  :config (setq hungry-delete-join-reluctantly 1)
  (global-hungry-delete-mode))
#+END_SRC

#+RESULTS:
: t

** Iedit
#+begin_src emacs-lisp
(use-package iedit
  :bind ("C-:" . iedit-mode)
  )
#+end_src

#+RESULTS:
: iedit-mode

** Ini mode
#+begin_src emacs-lisp
(use-package ini-mode)
#+end_src

#+RESULTS:

** JSON mode
#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :mode (rx ".json" eos))
#+END_SRC

** LSP
*** LSP mode
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode					;
  :after company
  :init
  (setq lsp-keymap-prefix "C-c l" ;; Set prefix for lsp-command-map
		lsp-prefer-flymake nil
		)
  :hook ((lsp-mode . lsp-enable-which-key-integration)
		 (rst-mode . lsp-deferred) ;; Enable lsp for rst-mode
		 (nix-mode . lsp-deferred) ;; Enable lsp for nix-mode
  )
  :config
  (setq lsp-prefer-flymake nil ;; Use lsp-ui and flycheck instead of flymake
		lsp-enable-snippet t
		lsp-completion-provider :none)

  (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)

  ;; Register lsp clients
  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection "esbonio")
					:major-modes '(rst-mode)
					:server-id 'esbonio))
  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection '("rnix-lsp-unstable"))
					:major-modes '(nix-mode)
					:server-id 'nix))

  ;; Language ID configuration
  (add-to-list 'lsp-language-id-configuration '(nix-mode . "nix"))

  ;; File watch ignore list
  (add-to-list 'lsp-file-watch-ignored-files "[/\\\\]\\.venv\\'")
  (add-to-list 'lsp-file-watch-ignored-files "[/\\\\]\\virt\\'")
  )
#+END_SRC


*** LSP ui
#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :config
  (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
  (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)
  (setq
   lsp-ui-doc-border (face-foreground 'default)
   lsp-ui-doc-header t
   lsp-ui-doc-include-signature t
   lsp-ui-doc-position 'bottom
   lsp-ui-imenu-auto-refresh t
   lsp-ui-sideline-delay 0.05
   lsp-ui-sideline-enable t
   lsp-ui-sideline-show-code-actions t
   lsp-ui-sideline-show-diagnostics t
   lsp-ui-sideline-show-hover t
   )
  :hook (lsp-mode . lsp-ui-mode)
  )
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :after magit-gitflow
  :hook (magit-mode . turn-on-magit-gitflow)
  :bind (("C-x g" . magit-status)
		 ("C-x M-g" . magit-dispatch))
  :config
  (setq magit-git-executable "git"
		;; magit-repository-directories '(("~/.dotfiles" . 0)
		;;							   ("~/Documents" . 2))
		)

  )
#+END_SRC

#+RESULTS:
: magit-dispatch

*** Magit workflow
#+BEGIN_SRC emacs-lisp
(use-package magit-gitflow
  :ensure t)
#+END_SRC

#+RESULTS:

** Man/Woman
#+BEGIN_SRC emacs-lisp
(use-package man
  :ensure f
  :config
  (set-face-attribute 'Man-overstrike nil :inherit font-lock-type-face :bold t)
  (set-face-attribute 'Man-underline nil :inherit font-lock-keyword-face :underline t))

#+END_SRC

#+RESULTS:
: t

** Move buffer
#+BEGIN_SRC emacs-lisp
(use-package buffer-move
  :bind (("C-c m r" . 'buf-move-right)
		 ("C-c m l" . 'buf-move-left)
		 ("C-c m u" . 'buf-move-up)
		 ("C-c m d" . 'buf-move-down)))
#+END_SRC

#+RESULTS:
: buf-move-down

** Nix
#+BEGIN_SRC emacs-lisp
(use-package nix-mode
  :mode (rx ".nix" eos))
#+END_SRC

#+RESULTS:

** Org Mode
#+BEGIN_SRC emacs-lisp
(use-package org
  :pin gnu
  :config (setq org-src-fontify-natively t               ;; pretty source code fontification
				org-src-tab-acts-natively t              ;; Native code block indentation
				org-edit-src-content-indentation 0       ;; Spaces from #+begin_src
				org-startup-with-inline-images t         ;; inline images when loading a new Org file
				org-hide-emphasis-markers t              ;; hide emphasize marker
				org-hierarchical-todo-statistics nil     ;; Recursively count todos
				org-hierarchical-checkbox-statistics nil ;; Recursively count checkboxes
				org-fontify-quote-and-verse-blocks t     ;; Highlight quotes
				)
  '(org-export-backends (quote (ascii beamer html icalendar latex md odt rst)))
  )
#+END_SRC

#+RESULTS:
: t

*** Org modern ui theme
#+BEGIN_SRC emacs-lisp
(use-package org-modern
  :after org
  :config (global-org-modern-mode)
  )
#+END_SRC

#+RESULTS:
: t

*** Extra Export backends
#+BEGIN_SRC emacs-lisp
(use-package ox-rst)
(use-package ox-twbs)
#+END_SRC

#+RESULTS:

** PHP
#+begin_src emacs-lisp
(use-package php-mode)
#+end_src

#+RESULTS:

*** Extra Snippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet-snippets
  :requires yasnippet)
#+END_SRC

#+RESULTS:

*** Extreme Snippets
#+BEGIN_SRC emacs-lisp
;; (use-package yasnippet-radical-snippets
;;   :ensure t
;;   :after yasnippet
;;   :config
;;  (yasnippet-radical-snippets-initialize))
#+END_SRC

#+RESULTS:

** PHP Mode
#+BEGIN_SRC emacs-lisp
(use-package php-mode)
#+END_SRC

#+RESULTS:

** Python
#+begin_src emacs-lisp
(use-package python
  :ensure nil  ;; since python mode is built-in
  :mode ("\\.py\\'" . python-mode)
  :init
  (add-to-list 'process-coding-system-alist '("python" . (utf-8 . utf-8)))
  :config (setq python-indent-offset 4)
  ;; (add-hook 'python-mode-hook 'blacken-mode)
  ;; (add-hook 'python-mode-hook 'importmagic-mode)
  ;; (add-hook 'python-mode-hook 'py-autopep8-enable-on-save)
  (defun pretty-python-code ()
	(interactive)
	(call-interactively 'pyimport-remove-unused)
	(call-interactively 'python-isort-buffer)
	(call-interactively 'python-black-buffer))
  )

#+end_src

#+RESULTS:

*** Elpy
LSP is nice and all, but ELPY still have a lot of nice tools for refactoring and browsing
#+begin_src emacs-lisp
(use-package elpy
  :ensure t
  :init
  (elpy-enable)
  :config
  :hook
  (python-mode . elpy-mode)
  )

#+end_src

#+RESULTS:
| elpy-mode | pyvenv-parent-env |

*** Poetry
#+BEGIN_SRC emacs-lisp
(use-package poetry)
#+END_SRC

#+RESULTS:

*** Pyenv
#+BEGIN_SRC emacs-lisp
;; Use pyvenv package for managing Python virtual environments
(defun pyvenv-parent-env ()
	;; Locating the virtual environment file (.python-version) in the directory tree
	;; and extracting its contents to use for setting up the virtual environment
	(let* ((root (locate-dominating-file
				  (or (buffer-file-name) default-directory)
				  ".python-version"))
		   (venv (and root
					  (with-temp-buffer
						(insert-file-contents
						 (expand-file-name ".python-version" root))
						(string-trim (buffer-string))))))
	  ;; If a virtual environment is found, enable pyvenv mode,
	  ;; activate the virtual environment and restart lsp workspace
	  (when venv
		(pyvenv-mode 1)
		(pyvenv-tracking-mode 1)
		(pyvenv-workon venv))))

;; (use-package pyvenv
;;   :ensure t
;;   :init
;;   (setenv "WORKON_HOME" "~/.pyenv/versions")
;;   (add-hook 'find-file-hook 'pyvenv-parent-env)
;;   :hook (python-mode . pyvenv-parent-env)
;;   :config
;;   )

#+END_SRC

#+RESULTS:
| pyvenv-parent-env |

*** prettify the code to standards!

**** isort

** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook ((org-mode . rainbow-delimiters-mode)
		 (prog-mode . rainbow-delimiters-mode)))
#+END_SRC

#+RESULTS:
| rainbow-delimiters-mode |

** Systemd
#+BEGIN_SRC emacs-lisp
(use-package systemd
  :mode
  ("\\.service'" . systemd-mode)
  ("\\.timer'" . systemd-mode)
  ("\\.target'" . systemd-mode)
  ("\\.mount'" . systemd-mode)
  ("\\.automount'" . systemd-mode)
  ("\\.slice'" . systemd-mode)
  ("\\.socket'" . systemd-mode)
  ("\\.path'" . systemd-mode)
  ("\\.netdev'" . systemd-mode)
  ("\\.network'" . systemd-mode)
  ("\\.link'" . systemd-mode))
#+END_SRC

** Wakatime
#+begin_src emacs-lisp
(defun get-wakatime-api-key ()
  "Get Wakatime API key from .wakatime.cfg file."
  (let* ((home (expand-file-name "~"))
		 (wakacfg (concat (file-name-as-directory home) ".wakatime.cfg"))
		 (content (when (file-exists-p wakacfg)
					(with-temp-buffer
					  (insert-file-contents wakacfg)
					  (buffer-string)))))
	(when content
	  (let ((start (string-match "^api_key\\s-*=\\s-*" content)))
		(when start
		  (string-trim (substring content (match-end 0))))))))

(use-package wakatime-mode
  :init
  (setq wakatime-cli-path "/home/jga/.nix-profile/bin/wakatime-cli")
  (setq wakatime-api-key (get-wakatime-api-key))
  :diminish
  :config (global-wakatime-mode))
#+end_src

#+RESULTS:

** Webpaste
#+BEGIN_SRC emacs-lisp
(use-package webpaste
  :ensure t
  :bind (
		 ("C-c p b" . webpaste-paste-buffer)
		 ("C-c p r" . webpaste-paste-region)
		 ("C-c p p" . webpaste-paste-buffer-or-region))

  :config (setq webpaste-provider-priority '("dpaste.org")))
#+END_SRC
** Which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :delight
  :config
  (which-key-mode)
  (setq which-key-idle 0.5
		which-key-idle-delay 2)
  (which-key-setup-minibuffer))
#+END_SRC
** YAML mode
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode
  ("\\.yml'" . yaml-mode)
  ("\\.yaml" . yaml-mode))
#+END_SRC

** Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :after yasnippet-snippets
  :init (yas-global-mode 1)
  )
#+end_src
