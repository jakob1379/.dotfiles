#+TITLE: Definitely not [[https://github.com/meatcar/emacs.d][The Bestest Emacs]]
#+AUTHOR: Jakob G. Aaes
#+EMAIL: (concat "jakob1379" at-sign "gmail.com")

#+STARTUP: fold
#+babel: :cache yes
#+PROPERTY: header-args :results silent :tangle init.el
#+KEYWORDS:  org-mode, org, config
#+LANGUAGE:  en
#+OPTIONS:   H:4 toc:t num:2
#+PROPERTY:  header-args :padline no
#+PROPERTY: COOKIE_DATA recursive
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup

But it sure does take a lot of inspiration from it to improve performance.

The config is divided into sensible sections (hopefully) to seggregate what is mode specific and
external packages. As much as the config is done using =use-package=. See the link in this section
title for more information.

* Startup
** Early init
:properties:
:header-args+: :tangle "./early-init.el"
:end:
In Emacs 27+, package initialization occurs before ~user-init-file~ is loaded, but after
~early-init-file~. We handle package initialization, so we must prevent Emacs from doing it early!

#+begin_src emacs-lisp
;;; -*- lexical-binding: t; -*-
#+end_src
** Defer Compliations

#+begin_src emacs-lisp
(defvar comp-deferred-compliation)
(setq comp-deferred-compilation t)
#+end_src
** Low-hanging Speedup Fruits
Resizing the Emacs frame can be a terribly expensive part of changing the font. By inhibiting this,
we easily halve startup times with fonts that are larger than the system default.

#+begin_src emacs-lisp
(setq package-enable-at-startup nil)
(setq frame-inhibit-implied-resize t)
#+end_src
** Reduce GC
Following [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly][Doom-Emacs FAQ]], we max the garbage collection threshold on startup, and reset it to the original value after.

#+begin_src emacs-lisp
;; max memory available for gc on startup
(defvar me/gc-cons-threshold 16777216)
(setq gc-cons-threshold most-positive-fixnum
	  gc-cons-percentage 0.6)
(add-hook 'emacs-startup-hook
		  (lambda ()
			(setq gc-cons-threshold me/gc-cons-threshold
				  gc-cons-percentage 0.1)))

;; max memory available for gc when opening minibuffer
(defun me/defer-garbage-collection-h ()
  (setq gc-cons-threshold most-positive-fixnum))

(defun me/restore-garbage-collection-h ()
  ;; Defer it so that commands launched immediately after will enjoy the
  ;; benefits.
  (run-at-time
   1 nil (lambda () (setq gc-cons-threshold me/gc-cons-threshold))))

(add-hook 'minibuffer-setup-hook #'me/defer-garbage-collection-h)
(add-hook 'minibuffer-exit-hook #'me/restore-garbage-collection-h)
(setq garbage-collection-messages t)
#+end_src
** Temporarily avoid special handling of files

this script temporarily disables file name handlers during the startup of Emacs to speed up the
process. Once Emacs has finished starting up, it restores the file name handlers to their original
state.
#+begin_src emacs-lisp
(defvar me/-file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)
(add-hook 'emacs-startup-hook
		  (lambda ()
			(setq file-name-handler-alist me/-file-name-handler-alist)))
#+end_src
** Disable =site-run-file=
#+begin_src emacs-lisp
(setq site-run-file nil)
#+end_src
** Don't compact font caches
#+begin_src emacs-lisp
(setq inhibit-compacting-font-caches t)
#+end_src
** Package setup
#+begin_src emacs-lisp
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
						 ("gnu" . "https://elpa.gnu.org/packages/")
						 ("nongnu" . "https://elpa.nongnu.org/nongnu/")
						 ;; ("org"   . "https://orgmode.org/elpa/")
						 ("elpa"  . "https://elpa.gnu.org/packages/")))
(package-initialize)
;; https://github.com/jwiegley/use-package/issues/319#issuecomment-845214233
;; makes sure the :pin is respected
(assq-delete-all 'org package--builtins)
(assq-delete-all 'org package--builtin-versions)

;; make sure packages are refreshed
(when (not package-archive-contents)
  (package-refresh-contents))

;; ensure use-package is installed and loaded
(dolist (package '(use-package))
  (unless (package-installed-p package)
	(package-install package)))
(eval-when-compile (require 'use-package))

;; makes :ensure default to t
(require 'use-package-ensure)
(setq-default use-package-always-ensure t)

;; reduces the number of themes loaded at boot
(defadvice load-theme (before clear-previous-themes activate)
  ;; "Clear existing theme settings instead of layering them"
  (mapc #'disable-theme custom-enabled-themes))
#+end_src
** Use the garbage collector magic hack
#+begin_src emacs-lisp
(use-package gcmh
  :demand t
  :delight
  :config
  (gcmh-mode 1))
#+end_src

* General emacs settings
** Sane defaults
#+begin_src emacs-lisp
;; Global Settings
(setq-default
 ad-redefinition-action 'accept                     ;; Silence warnings for redefinition
 backup-by-copying t                                ;; Backup by copying
 browse-url-browser-function 'browse-url-firefox    ;; Set default browser to Firefox
 confirm-kill-processes nil                         ;; Confirm kill processes
 create-lockfiles nil                               ;; Create lockfiles
 custom-safe-themes t                               ;; Custom safe themes
 delete-old-versions t                              ;; Delete old versions
 dired-kill-when-opening-new-dired-buffer t         ;; Dired kill when opening new buffer
 enable-local-variables t                           ;; Enable local variables
 inhibit-startup-message t                          ;; Inhibit startup message
 inhibit-startup-screen t                           ;; Inhibit startup screen
 initial-scratch-message nil                        ;; Initial scratch message
 load-prefer-newer t                                ;; Load prefer newer files
 use-short-answers t                                ;; Use short answers in prompts
 dired-listing-switches "-alh"                      ;; human readable dired
)

;; Buffer-Local Settings
(setq
 column-number-mode t                               ;; Show columns/line in mode-line
 compilation-ask-about-save nil                     ;; Do not ask about saving when compiling
 compilation-save-buffers-predicate '(lambda () nil)     ;; Do not save unrelated buffers
 delete-by-moving-to-trash t                        ;; Delete files to trash
 fill-column 100                                    ;; Set width for linebreaking
 highlight-indentation-current-column-mode t        ;; Show a column line for the current lines
 highlight-indentation-mode t                       ;; Make horizontal lines for all lines
 indent-tabs-mode nil                               ;; Go away, tabs - use spaces!
 read-process-output-max (* 1024 1024)              ;; Increase read size per process
 require-final-newline t                            ;; Adds newline at end of file if necessary
 select-enable-clipboard t                          ;; Merge system's and Emacs' clipboard
 tab-always-indent 'complete                        ;; Tab indents first then tries completions
 tab-width 4                                        ;; Smaller width for tab characters
 uniquify-buffer-name-style 'forward                ;; Uniquify buffer names
 window-combination-resize t                        ;; Resize windows
)

(electric-pair-mode 1)
(global-auto-revert-mode 1)                         ;; refresh a buffer if changed on disk
(global-display-fill-column-indicator-mode 1)       ;; Show this indicator > | <
(global-display-line-numbers-mode 1)
(global-font-lock-mode t)                           ;; always highlight code
(global-so-long-mode 1)
(global-visual-line-mode 1)                         ;; Wrap line
(save-place-mode 1)                                 ;; continue where you left off
(tool-bar-mode 0)                                   ;; it's not used anyways
(menu-bar-mode 0)
#+end_src
** UTF-8 by Default
Emacs is very conservative about assuming encoding. Everything is utf-8 these days, lets have that as the default.
#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(set-file-name-coding-system 'utf-8)
(set-clipboard-coding-system 'utf-8)
(set-buffer-file-coding-system 'utf-8)
#+end_src
** Narrow region
#+begin_src emacs-lisp
(put 'narrow-to-defun  'disabled nil)
(put 'narrow-to-page   'disabled nil)
(put 'downcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'set-goal-column 'disabled nil)
(put 'upcase-region 'disabled nil)
#+end_src

#+RESULTS:
** Desktop mode save and load
#+begin_src emacs-lisp
(setq desktop-path '("~/.emacs.d/.cache/"))
(desktop-save-mode)
(desktop-read)
#+end_src

#+RESULTS:
: t
** default hooks
#+begin_src emacs-lisp
(add-hook 'before-save-hook 'whitespace-cleanup)
#+end_src

#+RESULTS:
| whitespace-cleanup |
** y-or-n-p instead of yes/no
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

#+RESULTS:
: yes-or-no-p
** Make files executable if they start with a shebang
#+begin_src emacs-lisp
(defun add-chmod()
  (interactive)
  (save-restriction
	(widen)
	(let ((name (buffer-file-name)))
	  (if (and (not (string-match ":" name))
			   (not (string-match "/\\.[^/]+$" name))
			   (equal "#!" (buffer-substring 1 (min 3 (point-max)))))
		  (progn (set-file-modes name (logior (file-modes name) 73))
				 (message "Wrote %s (chmod +x)" name))))))

(add-hook 'after-save-hook
		  'executable-make-buffer-file-executable-if-script-p)

#+end_src
** Global hotkeys
#+begin_src emacs-lisp
(global-set-key (kbd "C-+")      'text-scale-increase)
(global-set-key (kbd "C--")      'text-scale-decrease)
(global-set-key [C-S-tab]        'previous-window)
(global-set-key [C-mouse-4]      'text-scale-increase)
(global-set-key [C-mouse-5]      'text-scale-decrease)
(global-set-key [C-tab]          'other-window)
(global-set-key [f9]             'ispell-change-dictionary)
(global-set-key [f10]            'treemacs)
(global-set-key [f12]            'ansible)
#+end_src

#+RESULTS:
: ansible
** Ansi colors decoding/rendering
#+begin_src emacs-lisp
(require 'ansi-color)
(defun display-ansi-colors ()
  (interactive)
  (ansi-color-apply-on-region (point-min) (point-max)))

#+end_src

#+RESULTS:
: display-ansi-colors
** Extra Garbage Collection (disabled)
#+BEGIN_SRC emacs-lisp
(add-function :after after-focus-change-function
			  (defun me/garbage-collect-maybe ()
				(unless (frame-focus-state)
				  (garbage-collect))))
#+END_SRC

#+RESULTS:
** Set snazzy theme
#+BEGIN_SRC emacs-lisp
(use-package snazzy-theme
  :config
  (load-theme 'snazzy t)
  )
#+END_SRC

#+RESULTS:
: t
** restart emacs function
#+BEGIN_SRC emacs-lisp
(use-package restart-emacs)
#+END_SRC

#+RESULTS:
** Auto update emacs packages
#+BEGIN_SRC emacs-lisp
(use-package auto-package-update
  :config
  (setq auto-package-update-prompt-before-update t
		auto-package-update-interval 7)
  )
#+END_SRC

#+RESULTS:
: t
** non-ASCII characters
#+BEGIN_SRC emacs-lisp
(require 'iso-transl)
#+END_SRC

#+RESULTS:
: iso-transl
** start emacs server

If emacs is not running as a server, start one. It should've been started by systemd, but this is just to be sure
#+BEGIN_SRC emacs-lisp
  (require 'server)
  (unless (server-running-p)
	(server-start))
#+END_SRC

#+RESULTS:
** Fancy Compilation

#+begin_src elisp
(add-hook 'compilation-filter-hook 'ansi-color-compilation-filter)
#+end_src
** Aesthetics

#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
(setq-default line-spacing 1)
;; highlight the current line
(global-hl-line-mode t)

;; fix color display when loading emacs in terminal
(defun enable-256color-term ()
  (interactive)
  (load-library "term/xterm")
  (terminal-init-xterm))

(unless (display-graphic-p)
  (if (string-suffix-p "256color" (getenv "TERM"))
    (enable-256color-term)))
#+end_src

* Mode configs
** All the icons
nice developer icons
#+begin_src emacs-lisp
(use-package all-the-icons
  :demand t)
(use-package all-the-icons-dired
  :if (display-graphic-p)
  :defer
  :after all-the-icons
  :hook (dired-mode . all-the-icons-dired-mode))
(use-package treemacs-all-the-icons
  :defer
  :after all-the-icons treemacs
  :config
  (treemacs-load-theme "all-the-icons"))
(use-package all-the-icons-completion
  :defer
  :after all-the-icons
  :config
  (add-hook 'marginalia-mode-hook
	    #'all-the-icons-completion-marginalia-setup)
  (all-the-icons-completion-mode 1))
#+end_src

#+RESULTS:
** Ansible
Ansible is a bit funky in that it should be only be loaded if there is a local variable
defining that the file indeed is part of an ansible project. This is done by with a in the
projects with something like in

#+begin_src emacs-lisp
(use-package ansible)
#+end_src

#+RESULTS:
** Auto Sudoedit
#+begin_src emacs-lisp
(use-package auto-sudoedit
  :custom (auto-sudoedit-mode 1))
#+end_src
** Beacon
Don't lose your cursor
#+BEGIN_SRC emacs-lisp
  (use-package beacon
:ensure t
:diminish
:bind ("C-x =" . (lambda ()
				   (interactive)
				   (beacon-blink)
				   (what-cursor-position)))
:config (beacon-mode))
#+END_SRC

#+RESULTS:
| lambda | nil | (interactive) | (beacon-blink) | (what-cursor-position) |
** Company mode
This configures the nice dropdown autocompletion system called company modes. It is highly
extensible but package specific extensions like lsp, yasnippet, etc., should be configures in their
section and not here.

*** Company package

#+BEGIN_SRC emacs-lisp
(use-package company
  :delight company-mode
  :hook (after-init . global-company-mode)
  :config
  (add-to-list 'company-backends '(company-capf :with company-yasnippet))
  (setq company-dabbrev-downcase nil
		company-echo-delay 0.1
		company-idle-delay 0.01
		company-minimum-prefix-length 1
		company-selection-wrap-around t
		company-show-numbers t
		;; company-tooltip-align-annotations t
		;; company-tooltip-limit 20
		;; company-tooltip-align-annotations t
		)
)
#+END_SRC
*** Company-statistics
This backend helps improve the user experience by keeping track of completions used and
order things accordingly

#+BEGIN_SRC emacs-lisp
(use-package company-statistics
  :config
  (company-statistics-mode))

#+END_SRC

#+RESULTS:
: t

*** Fuzzy search
Yes - we can have fuzzy search here too.
#+BEGIN_SRC emacs-lisp
(use-package company-fuzzy
  :diminish
  :config
  (setq company-fuzzy-passthrough-backends '(company-capf company-ispell))
  (global-company-fuzzy-mode))

#+END_SRC

#+RESULTS:
: t

*** Company box - pretty icons
#+BEGIN_SRC emacs-lisp
;; With use-package:
(use-package company-box
  :diminish
  :hook (company-mode . company-box-mode))
#+END_SRC

** Conf-mode
Associate various files with conf-mode
#+BEGIN_SRC emacs-lisp
  (use-package conf-mode
	:mode
	("\\.cfg\\'"		. conf-mode)
	("\\.conf\\'"		. conf-mode)
	("\\.env\\'"		. conf-mode)
	("\\.gitignore\\'"	. conf-mode)
	("\\.txt\\'"		. conf-mode)
	("\\.txt\\'"		. conf-mode)
	)
#+END_SRC
** Dashboard
[[https://github.com/emacs-dashboard/emacs-dashboard][emacs-dashboard]] adds a nice startup screen, showing recent files, projectes, etc.

#+begin_src emacs-lisp
(use-package dashboard
  :demand t
  :after all-the-icons projectile
  :if (< (length command-line-args) 2)
  :custom
  ;; show in `emacsclient -c`
  (initial-buffer-choice #'(lambda () (get-buffer-create "*dashboard*")))
  (dashboard-startup-banner 'logo)
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  (dashboard-center-content t)
  (dashboard-items '((recents  . 10)
		     (projects . 5)
		     (bookmarks . 5)))
  :config
  (dashboard-setup-startup-hook))
#+end_src
** Delight and Deminish
These two packages enable the customization of the mode line to either or customize text.

#+BEGIN_SRC emacs-lisp
(use-package delight)
(use-package diminish)
#+END_SRC

#+RESULTS:
** Direnv
#+BEGIN_SRC emacs-lisp
(use-package direnv
 :config
 (add-hook 'prog-mode-hook #'direnv--maybe-update-environment)
 (direnv-mode))
#+END_SRC
** Editorconfig
read and understand ~.editorconfig~ files
#+begin_src emacs-lisp
(use-package editorconfig
  :defer 1
  :diminish
  :config
  (editorconfig-mode 1))
#+end_src
** Emacs restart
#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs)
#+END_SRC

#+RESULTS:
** Expand region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-=" . er/expand-region))
#+END_SRC

#+RESULTS:
: er/expand-region
** Fast Scrolling
Always redraw immediately when scrolling, more responsive and doesn't hang! Sourced from http://emacs.stackexchange.com/a/31427/2418

#+begin_src emacs-lisp
(setq fast-but-imprecise-scrolling t
      jit-lock-defer-time 0)
#+end_src

[[https://github.com/ahungry/fast-scroll][fast-scroll]] "works by temporarily disabling font-lock and switching to a barebones mode-line, until you stop scrolling (at which point it re-enables)". It only does this when scrolling super fast, to keep everything responsive.

#+begin_src emacs-lisp
(use-package fast-scroll
  :defer
  :delight
  :hook
  (fast-scroll-start . (lambda () (flycheck-mode -1)))
  (fast-scroll-end . (lambda () (flycheck-mode 1)))
  :config
  (fast-scroll-config)
  (fast-scroll-mode 1))
#+end_src
** Flyspell
#+BEGIN_SRC emacs-lisp
  (use-package flyspell
	:delight
	:hook (prog-mode . (lambda () (setq flyspell-prog-text-faces
										(delq 'font-lock-string-face
											  flyspell-prog-text-faces))))
		 (text-mode . flyspell-mode)
		 (prog-mode . flyspell-prog-mode))
#+END_SRC

#+RESULTS:

*** Guess Language
#+BEGIN_SRC emacs-lisp
(use-package guess-language
  :config (setq guess-language-languages '(en da)
				guess-language-min-paragraph-length 35))

#+END_SRC

#+RESULTS:
: t
** Fonts
The [[https://github.com/rolandwalker/unicode-fonts][unicode-fonts]] package helps Emacs use the full range of unicode characters provided by most fonts.

We set a regular font and a ~variable-pitch~ one, the latter is used by ~mixed-pitch-mode~ to render regular text with a proportional font.

#+begin_src emacs-lisp
(use-package persistent-soft
  :demand t)
(use-package unicode-fonts
  :demand t
  :after persistent-soft
  :config
  (unicode-fonts-setup)
  )
#+end_src
*** Firacode
nice ligatures
#+BEGIN_SRC emacs-lisp
(use-package fira-code-mode
  :custom (fira-code-mode-disabled-ligatures '("[]" "x"))  ; ligatures you don't want
  :delight
  :config (global-fira-code-mode))
#+END_SRC

#+RESULTS:
: t
** Format all
Nice tool that uses prettier to format code
#+BEGIN_SRC emacs-lisp
(use-package format-all)

#+END_SRC

#+RESULTS:
** Git
This section is dedicated to various git tools
*** Git
#+begin_src emacs-lisp
(use-package git-modes)
#+end_src
*** Git Gutter
#+begin_src emacs-lisp
(use-package diff-hl
  :defer
  :hook
  (dired-mode . diff-hl-dired-mode-unless-remote)
  :config
  (global-diff-hl-mode 1))
#+end_src
*** Mixed Pitch Mode
[[https://gitlab.com/jabranham/mixed-pitch][mixed-pitch]] allows us to use proportional fonts to display text that isn't code, and make files more readable.

#+begin_src emacs-lisp
(use-package mixed-pitch
  :after all-the-icons
  :defer 1
  :commands mixed-pitch-mode
  :custom
  (mixed-pitch-set-height t))
  ;; :hook (text-mode . mixed-pitch-mode))
#+end_src
** Graphviz-Dot-Mode
#+begin_src emacs-lisp
(use-package graphviz-dot-mode)
#+end_src

#+RESULTS:
** Helm
#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :after all-the-icons
  :bind (("M-x"     . helm-M-x) ;; Evaluate functions
		 ("C-x C-f" . helm-find-files) ;; Open or create files
		 ("C-x b"   . helm-mini) ;; Select buffers
		 ("C-x C-r" . helm-recentf) ;; Select recently saved files
		 ("C-c i"   . helm-imenu) ;; Select document heading
		 ("M-y"     . helm-show-kill-ring)
		 :map helm-map
		 ;; ("<tab>" . helm-execute-persistent-action)
		 )
  :config
  ;; (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
  (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
  (setq helm-always-two-windows nil
		helm-autoresize-max-height 0
		helm-autoresize-min-height 20
		helm-echo-input-in-header-line t
		helm-ff-file-name-history-use-recentf t
		helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
		helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
		helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
		helm-M-x-show-short-doc t
		helm-M-x-fuzzy-match t
		)
  (autoload 'dired-jump "dired-x"
	"Jump to Dired buffer corresponding to current buffer." t)

  (autoload 'dired-jump-other-window "dired-x"
	"Like \\[dired-jump] (dired-jump) but in other window." t)

  (define-key global-map "\C-x\C-j" 'dired-jump)
  (define-key global-map "\C-x4\C-j" 'dired-jump-other-window)
  (helm-ff-icon-mode)
  (helm-adaptive-mode)
  (helm-autoresize-mode)
  )
#+END_SRC

#+RESULTS:

*** Helm company
#+BEGIN_SRC emacs-lisp
(use-package helm-company
  :after (helm company)
  :commands (helm-company)
  :init
  (define-key company-mode-map (kbd "C-;") 'helm-company)
  (define-key company-active-map (kbd "C-;") 'helm-company)
  :config
  (setq helm-company-display-candidates-hash t)
  )
#+END_SRC
** Helpful
[[https://github.com/Wilfred/helpful][helpful]] makes a better Emacs =*help*= buffer, with colors and contextual information.

#+begin_src emacs-lisp
(use-package helpful
  :defer
  :config
  (add-to-list 'display-buffer-alist
	       '("*[Hh]elp"
		 (display-buffer-reuse-mode-window
		  display-buffer-pop-up-window))))
#+end_src
** Hideshow
#+BEGIN_SRC emacs-lisp
(use-package hideshow
  :bind (("C-c TAB" . hs-toggle-hiding)
		 ("C-c C--" . 'hs-hide-all)
		 ("C-c C-+" . 'hs-show-all))
  :delight hs-minor-mode
  :init (add-hook 'prog-mode-hook #'hs-minor-mode)
  ;; :diminish hs-minor-mode
  :config
  ;; Automatically open a block if you search for something where it matches
  (setq hs-isearch-open t)

  ;; Add `json-mode' and `javascript-mode' to the list
  (setq hs-special-modes-alist (mapcar 'purecopy '((c-mode "{" "}" "/[*/]" nil nil)
												   (c++-mode "{" "}" "/[*/]" nil nil)
												   (java-mode "{" "}" "/[*/]" nil nil)
												   (js-mode "{" "}" "/[*/]" nil)
												   (json-mode "{" "}" "/[*/]" nil)
												   (javascript-mode  "{" "}" "/[*/]" nil)))))

#+END_SRC
** Highlight Symbol
#+BEGIN_SRC emacs-lisp
(use-package highlight-symbol
  :hook ((prog-mode . highlight-symbol-mode)
		 ;; (prog-mode . delete-selection-mode)
		 (org-mode . highlight-symbol-mode)
		 ;; (org-mode . delete-selection-mode)
		 )
  :diminish
  :config
  (setq highlight-symbol-idle-delay 0.01))
#+END_SRC

#+RESULTS:
** Hungry Delete
Deleting a whitespace character will delete all whitespace until the next non-whitespace character.
#+BEGIN_SRC emacs-lisp
(use-package hungry-delete
  :delight
  :config (setq hungry-delete-join-reluctantly 1)
  (global-hungry-delete-mode))
#+END_SRC

#+RESULTS:
: t
** Iedit
#+begin_src emacs-lisp
(use-package iedit
  :bind ("C-:" . iedit-mode)
  )
#+end_src

#+RESULTS:
: iedit-mode
** Info-colors
[[https://github.com/ubolonton/info-colors][info-colors]] adds pretty Info colors.

#+begin_src emacs-lisp
(use-package info-colors
  :defer 1
  :config
  (add-hook 'Info-selection-hook 'info-colors-fontify-node))
#+end_src
** Ini mode
#+begin_src emacs-lisp
(use-package ini-mode)
#+end_src

#+RESULTS:
** JS
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :interpreter (("node" . js2-mode))
  :config
  (add-hook 'js-mode-hook #'js2-minor-mode)
  (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
  (add-to-list 'auto-mode-alist '("\\.json$" . js2-mode))
  (setq js2-basic-offset 2
	indent-tabs-mode nil))

#+END_SRC
** LSP
*** LSP mode
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :after company
    :init
    (setq lsp-keymap-prefix "C-c l" ;; Set prefix for lsp-command-map
	  )
    :hook
    (lsp-mode . lsp-enable-which-key-integration)
    (prog-mode . lsp-deferred)
    (yaml-mode . lsp-deferred)
    (nix-mode . lsp-deferred)
    (rst-mode . lsp-deferred)
    :config
    (setq lsp-prefer-flymake nil ;; Use lsp-ui and flycheck instead of flymake
		  lsp-enable-snippet t
		  lsp-completion-provider :none
		  lsp-intelephense-multi-root nil
		  )

    (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)

    ;; Register lsp clients
    (lsp-register-client
     (make-lsp-client :new-connection (lsp-stdio-connection "esbonio")
					  :major-modes '(rst-mode)
					  :server-id 'esbonio))
    (lsp-register-client
     (make-lsp-client :new-connection (lsp-stdio-connection '("rnix-lsp-unstable"))
					  :major-modes '(nix-mode)
					  :server-id 'nix))

    ;; Language ID configuration
    (add-to-list 'lsp-language-id-configuration '(nix-mode . "nix"))

    ;; File watch ignore list
    (add-to-list 'lsp-file-watch-ignored-files "[/\\\\]\\.venv\\'")
    (add-to-list 'lsp-file-watch-ignored-files "[/\\\\]\\virt\\'")
    )
#+END_SRC
*** LSP ui
#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :config
  (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
  (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)
  (setq
   lsp-ui-doc-border (face-foreground 'default)
   lsp-ui-doc-header t
   lsp-ui-doc-include-signature t
   lsp-ui-doc-position 'bottom
   lsp-ui-imenu-auto-refresh t
   lsp-ui-sideline-delay 0.05
   lsp-ui-sideline-enable t
   lsp-ui-sideline-show-code-actions t
   lsp-ui-sideline-show-diagnostics t
   lsp-ui-sideline-show-hover t
   )
  :hook (lsp-mode . lsp-ui-mode)
  )
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :after magit-gitflow
  :hook (magit-mode . turn-on-magit-gitflow)
  :bind (("C-x g" . magit-status)
		 ("C-x M-g" . magit-dispatch))
  :config
  (setq magit-git-executable "git"
		;; magit-repository-directories '(("~/.dotfiles" . 0)
		;;							   ("~/Documents" . 2))
		)

  )
#+END_SRC

#+RESULTS:
: magit-dispatch

*** Magit workflow
#+BEGIN_SRC emacs-lisp
(use-package magit-gitflow
  :ensure t)
#+END_SRC

#+RESULTS:
** Man/Woman
#+BEGIN_SRC emacs-lisp
(use-package man
  :ensure f
  :config
  (set-face-attribute 'Man-overstrike nil :inherit font-lock-type-face :bold t)
  (set-face-attribute 'Man-underline nil :inherit font-lock-keyword-face :underline t))

#+END_SRC

#+RESULTS:
: t
** Markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  :commands gfm-mode markdown-mode
  :mode
  ("README\\.md\\'" . gfm-mode)
  ("\\.md\\'" . markdown-mode)
  ("\\.markdown\\'" . markdown-mode))
#+end_src
** Marginalia
#+begin_src emacs-lisp
(use-package marginalia
  :defer 1
  :config
  (marginalia-mode 1))
#+end_src
** Move buffer
#+BEGIN_SRC emacs-lisp
(use-package buffer-move
  :bind (("C-c m r" . 'buf-move-right)
		 ("C-c m l" . 'buf-move-left)
		 ("C-c m u" . 'buf-move-up)
		 ("C-c m d" . 'buf-move-down)))
#+END_SRC

#+RESULTS:
: buf-move-down
** Multiple Cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :config (multiple-cursors-mode t)
  :bind (("H-SPC" . set-rectangular-region-anchor)
		 ("C-M-SPC" . set-rectangular-region-anchor)
		 ("C->" . mc/mark-next-like-this)
		 ("C-<" . mc/mark-previous-like-this)
		 ("C-c C->" . mc/mark-all-like-this)
		 ("C-c C-SPC" . mc/edit-lines)
		 ))
#+END_SRC
** Nix
*** Nix mode
#+BEGIN_SRC emacs-lisp
(use-package nix-mode
  :mode (rx ".nix" eos))
#+END_SRC
*** nicely format nix stuff
#+begin_src emacs-lisp
(use-package nixpkgs-fmt
  :hook (nix-mode . nixpkgs-fmt-on-save-mode))
(use-package pretty-sha-path
  :hook
  (shell-mode . pretty-sha-path-mode)
  (dired-mode . pretty-sha-path-mode))
#+end_src
** No Littering
[[https://github.com/emacscollective/no-littering][no-littering]] teaches Emacs to not leave it's files everywhere, and just keep them neatly in =.emacs.d= where they don't bother anyone.

We also set ~custom-file~ to be within one of these new nice directories, so Emacs doesn't keep chaging =init.el= and messing with our git workflow.
#+begin_src emacs-lisp
(use-package no-littering
  :demand t
  :config
  (setq
   auto-save-file-name-transforms
   `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
  (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
  (when (file-exists-p custom-file)
	(load custom-file)))
#+end_src
** Org Mode
#+BEGIN_SRC emacs-lisp
(use-package org
  :pin gnu
  :commands org-babel-do-load-languages
  :config (setq
	   org-cycle-separator-lines -1
	   org-edit-src-content-indentation 0       ;; Spaces from #+begin_src
	   org-fontify-quote-and-verse-blocks t     ;; Highlight quotes
	   org-hide-emphasis-markers t              ;; hide emphasize marker
	   org-hierarchical-checkbox-statistics nil ;; Recursively count checkboxes
	   org-hierarchical-todo-statistics nil     ;; Recursively count todos
	   org-pretty-entities t
	   org-src-fontify-natively t               ;; pretty source code fontification
	   org-src-preserve-indentation t
	   org-src-strip-leading-and-trailing-blank-lines t
	   org-src-tab-acts-natively t              ;; Native code block indentation
	   org-src-window-setup 'other-window
	   org-startup-with-inline-images t         ;; inline images when loading a new Org file

	   org-file-apps
	   (quote
	    ((auto-mode . emacs)
	     ("\\.mm\\'" . default)
	     ("\\.x?html?\\'" . "/usr/bin/env firefox %s")
	     ("\\.pdf\\'" . default)))
	   )
  org-export-backends '(ascii html icalendar pandoc)     ;; Set export backends
  )
#+END_SRC

*** Org modern ui theme
#+BEGIN_SRC emacs-lisp
(use-package org-modern
  :after org
  :config (global-org-modern-mode)
  )
#+END_SRC

#+RESULTS:
: t

*** Extra Export backends
#+BEGIN_SRC emacs-lisp
(use-package ox-rst)
(use-package ox-twbs)
(use-package ox-pandoc)
#+END_SRC

#+RESULTS:
** PHP
#+begin_src emacs-lisp
(use-package php-mode)
#+end_src

*** Extra Snippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet-snippets
  :requires yasnippet)
#+END_SRC

*** Extreme Snippets
#+BEGIN_SRC emacs-lisp
;; (use-package yasnippet-radical-snippets
;;   :ensure t
;;   :after yasnippet
;;   :config
;;  (yasnippet-radical-snippets-initialize))
#+END_SRC

#+RESULTS:
** PHP Mode
#+BEGIN_SRC emacs-lisp
(use-package php-mode)
#+END_SRC

#+RESULTS:
** Python
#+begin_src emacs-lisp
(use-package python
  :ensure nil  ;; since python mode is built-in
  :mode ("\\.py\\'" . python-mode)
  :init
  (add-to-list 'process-coding-system-alist '("python" . (utf-8 . utf-8)))
  :config (setq python-indent-offset 4)
  ;; (add-hook 'python-mode-hook 'blacken-mode)
  ;; (add-hook 'python-mode-hook 'importmagic-mode)
  ;; (add-hook 'python-mode-hook 'py-autopep8-enable-on-save)
  (defun pretty-python-code ()
	(interactive)
	(call-interactively 'pyimport-remove-unused)
	(call-interactively 'python-isort-buffer)
	(call-interactively 'python-black-buffer))
  )

#+end_src

#+RESULTS:

*** Elpy
LSP is nice and all, but ELPY still have a lot of nice tools for refactoring and browsing
#+begin_src emacs-lisp
(use-package elpy
  :ensure t
  :init
  (elpy-enable)
  :config
  :hook
  (python-mode . elpy-mode)
  )

#+end_src

*** Poetry
#+BEGIN_SRC emacs-lisp
(use-package poetry)
#+END_SRC

#+RESULTS:

*** Pyenv
#+BEGIN_SRC emacs-lisp
;; Use pyvenv package for managing Python virtual environments
(defun pyvenv-parent-env ()
	;; Locating the virtual environment file (.python-version) in the directory tree
	;; and extracting its contents to use for setting up the virtual environment
	(let* ((root (locate-dominating-file
				  (or (buffer-file-name) default-directory)
				  ".python-version"))
		   (venv (and root
					  (with-temp-buffer
						(insert-file-contents
						 (expand-file-name ".python-version" root))
						(string-trim (buffer-string))))))
	  ;; If a virtual environment is found, enable pyvenv mode,
	  ;; activate the virtual environment and restart lsp workspace
	  (when venv
		(pyvenv-mode 1)
		(pyvenv-tracking-mode 1)
		(pyvenv-workon venv))))

;; (use-package pyvenv
;;   :ensure t
;;   :init
;;   (setenv "WORKON_HOME" "~/.pyenv/versions")
;;   (add-hook 'find-file-hook 'pyvenv-parent-env)
;;   :hook (python-mode . pyvenv-parent-env)
;;   :config
;;   )

#+END_SRC

** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook ((org-mode . rainbow-delimiters-mode)
		 (prog-mode . rainbow-delimiters-mode)))
#+END_SRC

#+RESULTS:
| rainbow-delimiters-mode |
** RST - restructured text
#+BEGIN_SRC emacs-lisp
(use-package rst )
#+END_SRC
** Solaire mode
[[https://github.com/hlissner/emacs-solaire-mode][solaire-mode]] darkens non-important buffers, to help you focus on what matters.

#+begin_src emacs-lisp
;; A more complex, more lazy-loaded config
(use-package solaire-mode
  :defer 1
  :hook
  ;; Ensure solaire-mode is running in all solaire-mode buffers
  (change-major-mode . turn-on-solaire-mode)
  ;; ...if you use auto-revert-mode, this prevents solaire-mode from turning
  ;; itself off every time Emacs reverts the file
  (after-revert . turn-on-solaire-mode)
  ;; To enable solaire-mode unconditionally for certain modes:
  (ediff-prepare-buffer . solaire-mode)
  :custom
  (solaire-mode-auto-swap-bg t)
  :config
  (solaire-global-mode +1))
#+end_src
** Systemd
#+BEGIN_SRC emacs-lisp
(use-package systemd
  :mode
  ("\\.service'" . systemd-mode)
  ("\\.timer'" . systemd-mode)
  ("\\.target'" . systemd-mode)
  ("\\.mount'" . systemd-mode)
  ("\\.automount'" . systemd-mode)
  ("\\.slice'" . systemd-mode)
  ("\\.socket'" . systemd-mode)
  ("\\.path'" . systemd-mode)
  ("\\.netdev'" . systemd-mode)
  ("\\.network'" . systemd-mode)
  ("\\.link'" . systemd-mode))
#+END_SRC
** Treemacs
[[https://github.com/Alexander-Miller/treemacs][treemacs]] is a sidebar tree file explorer of the current directory/project.
=evil=, =projectile=, and =magit= integration is enabled.

#+begin_src emacs-lisp
(use-package treemacs
  :defer 2
  :bind
  :commands treemacs treemacs-find-file
  :config (treemacs))
(use-package treemacs-magit
  :defer 1
  :after treemacs-magit)
#+end_src
** VLF - very large files
#+BEGIN_SRC emacs-lisp
(use-package vlf
  :autoload vlf-setup)
#+END_SRC
** Wakatime
#+begin_src emacs-lisp
(defun get-wakatime-api-key ()
  "Get Wakatime API key from .wakatime.cfg file."
  (let* ((home (expand-file-name "~"))
		 (wakacfg (concat (file-name-as-directory home) ".wakatime.cfg"))
		 (content (when (file-exists-p wakacfg)
					(with-temp-buffer
					  (insert-file-contents wakacfg)
					  (buffer-string)))))
	(when content
	  (let ((start (string-match "^api_key\\s-*=\\s-*" content)))
		(when start
		  (string-trim (substring content (match-end 0))))))))

(use-package wakatime-mode
  :init
  (setq wakatime-cli-path "/home/jga/.nix-profile/bin/wakatime-cli")
  (setq wakatime-api-key (get-wakatime-api-key))
  :diminish
  :config (global-wakatime-mode))
#+end_src

#+RESULTS:
** Webpaste
#+BEGIN_SRC emacs-lisp
(use-package webpaste
  :ensure t
  :bind (
		 ("C-c p b" . webpaste-paste-buffer)
		 ("C-c p r" . webpaste-paste-region)
		 ("C-c p p" . webpaste-paste-buffer-or-region))

  :config (setq webpaste-provider-priority '("dpaste.org")))
#+END_SRC
** Which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (which-key-mode 1)
  (which-key-setup-minibuffer)
  (set-face-attribute
	'which-key-local-map-description-face nil :weight 'bold)
  (setq which-key-idle-delay 2
		which-key-show-remaining-keys t)
  )
#+END_SRC
** YAML mode
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode
  ("\\.yml'" . yaml-mode)
  ("\\.yaml" . yaml-mode))
#+END_SRC
** Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :after yasnippet-snippets
  :init (yas-global-mode 1)
  )
#+end_src

** Remove flycheck elisp warnings in init.el
#+begin_src emacs-lisp
;; Local Variables:
;; flycheck-disabled-checkers: (emacs-lisp-checkdoc)
;; byte-compile-warnings: (not free-vars)
;; End:
#+end_src
