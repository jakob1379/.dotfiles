#!/usr/bin/env bash
set -euo pipefail
IFS=$'
'
shopt -s nullglob

# function definitions
displayUsage() {
    echo '
usage:  ppboy [...] [path]
operations:
    ppboy {-d delimiter}; define word delimiter
    ppboy {-h help};      shows help screen
    ppboy {-n number};    number of suggestions
    ppboy [path];         optional path.
'
}

setDir() {
    if [ $# = 1 ]
    then
	dir="$1"
    else
	dir=$(pwd)
    fi
    cd "$dir"
}

listFiles() {
    files=(*.pdf)
    NUMFILES=$(find . -iname "*.pdf" | wc -l)

    printf '%*s' "$(tput cols)" | tr ' ' "-" # line that spans screen
    for i in $(seq 0 $(( ${#files[@]} - 1 )))
    do
	echo "==> [$i] ""${files[$i]}"
    done
    printf '%*s' "$(tput cols)" | tr ' ' "-"
}

findISBN() {
    # Extract ISBN-13
    ISBN=$(grep -oP "(?:I.*S.*B.*N.*(?:-13)?:?\ )?\K(?=[0-9]{13}|(?=(?:[0-9]+[-\ ]){4})[-\ 0-9]{17})97[89][-\ ]?[0-9]{1,5}[-\ ]?[0-9]+[-\ ]?[0-9]+[-\ ]?[0-9]" out.txt)

    #Try ISBN-10 if no ISBN-13
    if [ "$ISBN" = "" ];
    then
	ISBN=$(grep -P "(?:I.*S.*B.*N.*(?:-10)?:?\ )?\K(?=[0-9X]{10}|(?=(?:[0-9]+[-\ ]){3})[-\ 0-9X]{13})[0-9]{1,5}[-\ ]?[0-9]+[-\ ]?[0-9]+[-\ ]?[0-9X]" out.txt)
    elif [ "$ISBN" = "" ];
    then
       echo "No ISBN found..."
    fi
}


getMetaData() {
    echo ""
}


extractTitle() {
    # Take NUMPAGES first NUMPAGES if pdf is too long
    pages=$(pdfinfo "$CURFILE" | awk '/Pages/{print $2}')
    if [ "$pages" -gt "$NUMPAGES" ];
    then
    	echo "Document is long:"
	pdfextract -o out.pdf "$CURFILE":0-"$NUMPAGES"
	CURFILE=out.pdf
	echo ""
    fi


    # Insert proposed title in top of file if present
    title=$(pdftitle -p "$CURFILE") || title=""
    if [ "$title" != "" ]; then sed -i "1 i$title" out.txt; fi
}

extractText() {
    pdftotext -f 1 -l "$NUMPAGES" "$CURFILE" out.txt
    sed -i '/^$/d' out.txt
    sed -i 's/\o14//' out.txt
}
chooseNames() {
    # Extract Text
    extractText

    #try to extract true title
    extractTitle

    # replace with chosen delimiter
    sed -in "s/ /$DELIM/g" out.txt

    # Let user choose what filename to use
    while true; do
	# read text into array
	names=( $(head -n "$NUMLINES" out.txt) )

	# present suggestions
	echo "I found some possible names:"
	echo "----------------------------"
	for i in $(seq 0 $(( "$NUMLINES" - 1 )))
	do
	    echo "--> [$i] ${names[$i]}"
	done
	echo ""
	read -r -p "What name should be used? [(#)name / (c)custom / (q)esc] " file_ans

	case $file_ans in
	    c)
		read -r -p "Enter file name: " file_name

		# remove .pdf if included by user
		file_name=$(echo "file_name" | sed 's/.pdf//')
		echo ""
		#rename file to chosen name
		echo "changing from:"
		echo "$CURFILE"
		echo "->"
		echo "$file_name.pdf"
		mv "$CURFILE" "$file_name.pdf"
		;;
    	    q)
		echo "back to beginning"
		break
    		;;
    	    *)
		if [ "$file_ans" -gt $(( NUMLINES - 1)) ]
		then
		    echo "Invalid option: $file_ans"
		else
		    #rename file to chosen name
		    echo "You chose: ${names[file_ans]}"
		    echo ""
		    echo "changing from:"
		    echo "$CURFILE"
		    echo "->"
		    echo "${names[file_ans]}.pdf"
		    mv "$CURFILE" "${names[file_ans]}.pdf"
		    break
		    # TODO: Make it possible to choose several names!
		fi

		;;
	esac
	echo ""
    done
}

# optional arguments
NUMPAGES=5
NUMLINES=5
DELIM=" "

while getopts ":d:hn:" opt; do
    case ${opt} in
	d)
	    DELIM=${OPTARG}
	    ;;
	h)
	    displayUsage
	    exit 1
	    ;;
	n)
	    NUMLINES=${OPTARG}
	    ;;
	\?)
	    echo "Invalid option: $OPTARG" 1>&2
	    displayUsage
	    exit 1
	    ;;
	:)
	    echo "Invalid option: $OPTARG requires an argument" 1>&2
	    displayUsage
	    exit 1
	    ;;
    esac
done

###############################################################################
#                           Let the scripting begin!                          #
###############################################################################

# set dir
setDir "$@"

while true; do
    # list files in dir
    listFiles
    read -rp "What file to operate on? [(#)file / (q)exit] " ans
    echo ''

    case ${ans} in
	q)
	    # if argument is q, then exit
	    echo "exiting..."
	    break
	    ;;
	*)
	    # if chose number matches existing number of files, alter this
	    if [ "$ans" -gt "$(( NUMFILES - 1 ))" ]
	    then
		echo "Invalid option: $ans"
	    else
		CURFILE=${files[$ans]}
		echo "you chose: ${CURFILE}"
		echo ""
		chooseNames
	    fi
	    ;;
    esac
done

#cleanup
rm "$dir"/out.txt*
rm "$dir"/out.pdf*
exit 0
